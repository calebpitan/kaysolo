/* tslint:disable */
/* eslint-disable */
/**
 * KayBot
 * KayBot is a chatbot that can be utilized for lead generation in the field of digital marketing.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface Account
 */
export interface Account {
  /**
   *
   * @type {any}
   * @memberof Account
   */
  id: any;
  /**
   *
   * @type {any}
   * @memberof Account
   */
  created_at: any;
  /**
   *
   * @type {any}
   * @memberof Account
   */
  updated_at: any;
  /**
   *
   * @type {any}
   * @memberof Account
   */
  deleted_at: any;
  /**
   *
   * @type {any}
   * @memberof Account
   */
  email: any;
  /**
   *
   * @type {any}
   * @memberof Account
   */
  active_at: any;
  /**
   *
   * @type {any}
   * @memberof Account
   */
  verified_at: any;
  /**
   *
   * @type {User}
   * @memberof Account
   */
  user: User;
}
/**
 *
 * @export
 * @interface AccountCreate
 */
export interface AccountCreate {
  /**
   *
   * @type {any}
   * @memberof AccountCreate
   */
  email: any;
  /**
   *
   * @type {any}
   * @memberof AccountCreate
   */
  password: any;
  /**
   *
   * @type {UserCreate}
   * @memberof AccountCreate
   */
  user: UserCreate;
}
/**
 *
 * @export
 * @interface ApplicationInfo
 */
export interface ApplicationInfo {
  /**
   *
   * @type {any}
   * @memberof ApplicationInfo
   */
  title: any;
  /**
   *
   * @type {any}
   * @memberof ApplicationInfo
   */
  version: any;
  /**
   *
   * @type {any}
   * @memberof ApplicationInfo
   */
  description: any;
}
/**
 *
 * @export
 * @interface ChatCompletionChoice
 */
export interface ChatCompletionChoice {
  /**
   *
   * @type {any}
   * @memberof ChatCompletionChoice
   */
  index: any;
  /**
   *
   * @type {ChatCompletionChoiceMessage}
   * @memberof ChatCompletionChoice
   */
  message: ChatCompletionChoiceMessage;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionChoice
   */
  finish_reason: any;
}
/**
 *
 * @export
 * @interface ChatCompletionChoiceMessage
 */
export interface ChatCompletionChoiceMessage {
  /**
   *
   * @type {ChatCompletionRoleEnum}
   * @memberof ChatCompletionChoiceMessage
   */
  role: ChatCompletionRoleEnum;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionChoiceMessage
   */
  content: any;
}

/**
 *
 * @export
 * @interface ChatCompletionResponse
 */
export interface ChatCompletionResponse {
  /**
   *
   * @type {ChatCompletionResponseBody}
   * @memberof ChatCompletionResponse
   */
  response: ChatCompletionResponseBody;
}
/**
 *
 * @export
 * @interface ChatCompletionResponseBody
 */
export interface ChatCompletionResponseBody {
  /**
   *
   * @type {any}
   * @memberof ChatCompletionResponseBody
   */
  id: any;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionResponseBody
   */
  object: any;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionResponseBody
   */
  created: any;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionResponseBody
   */
  model: any;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionResponseBody
   */
  choices: any;
  /**
   *
   * @type {ChatCompletionUsage}
   * @memberof ChatCompletionResponseBody
   */
  usage: ChatCompletionUsage;
}
/**
 *
 * @export
 * @interface ChatCompletionRoleEnum
 */
export interface ChatCompletionRoleEnum {}
/**
 *
 * @export
 * @interface ChatCompletionUsage
 */
export interface ChatCompletionUsage {
  /**
   *
   * @type {any}
   * @memberof ChatCompletionUsage
   */
  prompt_tokens: any;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionUsage
   */
  completion_tokens: any;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionUsage
   */
  total_tokens: any;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {any}
   * @memberof HTTPValidationError
   */
  detail?: any;
}
/**
 *
 * @export
 * @interface MessageCreate
 */
export interface MessageCreate {
  /**
   *
   * @type {any}
   * @memberof MessageCreate
   */
  message_body: any;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {any}
   * @memberof User
   */
  id: any;
  /**
   *
   * @type {any}
   * @memberof User
   */
  created_at: any;
  /**
   *
   * @type {any}
   * @memberof User
   */
  updated_at: any;
  /**
   *
   * @type {any}
   * @memberof User
   */
  deleted_at: any;
  /**
   *
   * @type {any}
   * @memberof User
   */
  first_name: any;
  /**
   *
   * @type {any}
   * @memberof User
   */
  last_name: any;
  /**
   *
   * @type {any}
   * @memberof User
   */
  username: any;
  /**
   *
   * @type {Account}
   * @memberof User
   */
  account: Account;
}
/**
 *
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
  /**
   *
   * @type {any}
   * @memberof UserCreate
   */
  first_name: any;
  /**
   *
   * @type {any}
   * @memberof UserCreate
   */
  last_name: any;
  /**
   *
   * @type {any}
   * @memberof UserCreate
   */
  username: any;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {any}
   * @memberof ValidationError
   */
  loc: any;
  /**
   *
   * @type {any}
   * @memberof ValidationError
   */
  msg: any;
  /**
   *
   * @type {any}
   * @memberof ValidationError
   */
  type: any;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Create a user account that will be used for authentication and will serve as the user\'s identification through the entire system
     * @summary Create Account
     * @param {AccountCreate} accountCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccountAccountCreatePost: async (
      accountCreate: AccountCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'accountCreate' is not null or undefined
      assertParamExists('createAccountAccountCreatePost', 'accountCreate', accountCreate);
      const localVarPath = `/account/create`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(accountCreate, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration);
  return {
    /**
     * Create a user account that will be used for authentication and will serve as the user\'s identification through the entire system
     * @summary Create Account
     * @param {AccountCreate} accountCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAccountAccountCreatePost(
      accountCreate: AccountCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createAccountAccountCreatePost(accountCreate, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AccountApiFp(configuration);
  return {
    /**
     * Create a user account that will be used for authentication and will serve as the user\'s identification through the entire system
     * @summary Create Account
     * @param {AccountApiCreateAccountAccountCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccountAccountCreatePost(
      requestParameters: AccountApiCreateAccountAccountCreatePostRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<Account> {
      return localVarFp
        .createAccountAccountCreatePost(requestParameters.accountCreate, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createAccountAccountCreatePost operation in AccountApi.
 * @export
 * @interface AccountApiCreateAccountAccountCreatePostRequest
 */
export interface AccountApiCreateAccountAccountCreatePostRequest {
  /**
   *
   * @type {AccountCreate}
   * @memberof AccountApiCreateAccountAccountCreatePost
   */
  readonly accountCreate: AccountCreate;
}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
  /**
   * Create a user account that will be used for authentication and will serve as the user\'s identification through the entire system
   * @summary Create Account
   * @param {AccountApiCreateAccountAccountCreatePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public createAccountAccountCreatePost(
    requestParameters: AccountApiCreateAccountAccountCreatePostRequest,
    options?: AxiosRequestConfig,
  ) {
    return AccountApiFp(this.configuration)
      .createAccountAccountCreatePost(requestParameters.accountCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * An endpoint to post messages and expect a response. The messages are reconstructed into a valuable prompt and sent over to OpenAI\'s API which most likely responds with a message.  :param message: The message object containing the message body to send  Raises:     HTTPException
     * @summary Create Message
     * @param {MessageCreate} messageCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessageChatMessagePost: async (
      messageCreate: MessageCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageCreate' is not null or undefined
      assertParamExists('createMessageChatMessagePost', 'messageCreate', messageCreate);
      const localVarPath = `/chat/message`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(messageCreate, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration);
  return {
    /**
     * An endpoint to post messages and expect a response. The messages are reconstructed into a valuable prompt and sent over to OpenAI\'s API which most likely responds with a message.  :param message: The message object containing the message body to send  Raises:     HTTPException
     * @summary Create Message
     * @param {MessageCreate} messageCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMessageChatMessagePost(
      messageCreate: MessageCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatCompletionResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMessageChatMessagePost(messageCreate, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ChatApiFp(configuration);
  return {
    /**
     * An endpoint to post messages and expect a response. The messages are reconstructed into a valuable prompt and sent over to OpenAI\'s API which most likely responds with a message.  :param message: The message object containing the message body to send  Raises:     HTTPException
     * @summary Create Message
     * @param {ChatApiCreateMessageChatMessagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessageChatMessagePost(
      requestParameters: ChatApiCreateMessageChatMessagePostRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<ChatCompletionResponse> {
      return localVarFp
        .createMessageChatMessagePost(requestParameters.messageCreate, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createMessageChatMessagePost operation in ChatApi.
 * @export
 * @interface ChatApiCreateMessageChatMessagePostRequest
 */
export interface ChatApiCreateMessageChatMessagePostRequest {
  /**
   *
   * @type {MessageCreate}
   * @memberof ChatApiCreateMessageChatMessagePost
   */
  readonly messageCreate: MessageCreate;
}

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
  /**
   * An endpoint to post messages and expect a response. The messages are reconstructed into a valuable prompt and sent over to OpenAI\'s API which most likely responds with a message.  :param message: The message object containing the message body to send  Raises:     HTTPException
   * @summary Create Message
   * @param {ChatApiCreateMessageChatMessagePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatApi
   */
  public createMessageChatMessagePost(
    requestParameters: ChatApiCreateMessageChatMessagePostRequest,
    options?: AxiosRequestConfig,
  ) {
    return ChatApiFp(this.configuration)
      .createMessageChatMessagePost(requestParameters.messageCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RootApi - axios parameter creator
 * @export
 */
export const RootApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Returns basic information about the application
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rootGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RootApi - functional programming interface
 * @export
 */
export const RootApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RootApiAxiosParamCreator(configuration);
  return {
    /**
     * Returns basic information about the application
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rootGet(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * RootApi - factory interface
 * @export
 */
export const RootApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = RootApiFp(configuration);
  return {
    /**
     * Returns basic information about the application
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rootGet(options?: AxiosRequestConfig): AxiosPromise<ApplicationInfo> {
      return localVarFp.rootGet(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * RootApi - object-oriented interface
 * @export
 * @class RootApi
 * @extends {BaseAPI}
 */
export class RootApi extends BaseAPI {
  /**
   * Returns basic information about the application
   * @summary Root
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RootApi
   */
  public rootGet(options?: AxiosRequestConfig) {
    return RootApiFp(this.configuration)
      .rootGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
