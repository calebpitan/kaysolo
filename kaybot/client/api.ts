/* tslint:disable */
/* eslint-disable */
/**
 * KayBot
 * KayBot is a chatbot that can be utilized for lead generation in the field of digital marketing.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface Account
 */
export interface Account {
  /**
   *
   * @type {any}
   * @memberof Account
   */
  id: any;
  /**
   *
   * @type {any}
   * @memberof Account
   */
  created_at: any;
  /**
   *
   * @type {any}
   * @memberof Account
   */
  updated_at: any;
  /**
   *
   * @type {any}
   * @memberof Account
   */
  deleted_at: any;
  /**
   *
   * @type {any}
   * @memberof Account
   */
  email: any;
  /**
   *
   * @type {any}
   * @memberof Account
   */
  active_at: any;
  /**
   *
   * @type {any}
   * @memberof Account
   */
  verified_at: any;
  /**
   *
   * @type {any}
   * @memberof Account
   */
  user: any;
}
/**
 *
 * @export
 * @interface AccountCreate
 */
export interface AccountCreate {
  /**
   *
   * @type {any}
   * @memberof AccountCreate
   */
  email: any;
  /**
   *
   * @type {any}
   * @memberof AccountCreate
   */
  password: any;
  /**
   *
   * @type {UserCreate}
   * @memberof AccountCreate
   */
  user: UserCreate;
}
/**
 *
 * @export
 * @interface ApplicationInfo
 */
export interface ApplicationInfo {
  /**
   *
   * @type {any}
   * @memberof ApplicationInfo
   */
  title: any;
  /**
   *
   * @type {any}
   * @memberof ApplicationInfo
   */
  version: any;
  /**
   *
   * @type {any}
   * @memberof ApplicationInfo
   */
  description: any;
}
/**
 *
 * @export
 * @interface ChatCompletionChoice
 */
export interface ChatCompletionChoice {
  /**
   *
   * @type {any}
   * @memberof ChatCompletionChoice
   */
  index: any;
  /**
   *
   * @type {ChatCompletionChoiceMessage}
   * @memberof ChatCompletionChoice
   */
  message: ChatCompletionChoiceMessage;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionChoice
   */
  finish_reason: any;
}
/**
 *
 * @export
 * @interface ChatCompletionChoiceMessage
 */
export interface ChatCompletionChoiceMessage {
  /**
   *
   * @type {ChatCompletionRoleEnum}
   * @memberof ChatCompletionChoiceMessage
   */
  role: ChatCompletionRoleEnum;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionChoiceMessage
   */
  content: any;
}

/**
 *
 * @export
 * @interface ChatCompletionResponse
 */
export interface ChatCompletionResponse {
  /**
   *
   * @type {ChatCompletionResponseBody}
   * @memberof ChatCompletionResponse
   */
  response: ChatCompletionResponseBody;
}
/**
 *
 * @export
 * @interface ChatCompletionResponseBody
 */
export interface ChatCompletionResponseBody {
  /**
   *
   * @type {any}
   * @memberof ChatCompletionResponseBody
   */
  id: any;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionResponseBody
   */
  object: any;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionResponseBody
   */
  created: any;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionResponseBody
   */
  model: any;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionResponseBody
   */
  choices: any;
  /**
   *
   * @type {ChatCompletionUsage}
   * @memberof ChatCompletionResponseBody
   */
  usage: ChatCompletionUsage;
}
/**
 *
 * @export
 * @interface ChatCompletionRoleEnum
 */
export interface ChatCompletionRoleEnum {}
/**
 *
 * @export
 * @interface ChatCompletionUsage
 */
export interface ChatCompletionUsage {
  /**
   *
   * @type {any}
   * @memberof ChatCompletionUsage
   */
  prompt_tokens: any;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionUsage
   */
  completion_tokens: any;
  /**
   *
   * @type {any}
   * @memberof ChatCompletionUsage
   */
  total_tokens: any;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {any}
   * @memberof HTTPValidationError
   */
  detail?: any;
}
/**
 *
 * @export
 * @interface MessageCreate
 */
export interface MessageCreate {
  /**
   *
   * @type {any}
   * @memberof MessageCreate
   */
  message_body: any;
}
/**
 *
 * @export
 * @interface Token
 */
export interface Token {
  /**
   * This class serves as a convenient representation     of a JWT RS256 Token, and also a valid Pydantic model     for representing this type of JWT token.      The signing algorithm used is an RS256 algorithm with     asymmetric key-pairs for signing and verifying, or encoding     and decoding.      It\'s safe to pass this object as a FastAPI or Pydantic     response model. It will be correctly represented as the     token string it wraps around, since it implements a     Pydantic model serializer.      To encode or sign a token from a regular Python data, dict,     you do not need to create this class object directly—the use     of `JWTRS256Token.from_data` covers this case.      The class object itself is used to wrap or represent an     already signed token string and can be used for decoding     the wrapped token.
   * @type {any}
   * @memberof Token
   */
  access_token: any;
  /**
   * This class serves as a convenient representation     of a JWT RS256 Token, and also a valid Pydantic model     for representing this type of JWT token.      The signing algorithm used is an RS256 algorithm with     asymmetric key-pairs for signing and verifying, or encoding     and decoding.      It\'s safe to pass this object as a FastAPI or Pydantic     response model. It will be correctly represented as the     token string it wraps around, since it implements a     Pydantic model serializer.      To encode or sign a token from a regular Python data, dict,     you do not need to create this class object directly—the use     of `JWTRS256Token.from_data` covers this case.      The class object itself is used to wrap or represent an     already signed token string and can be used for decoding     the wrapped token.
   * @type {any}
   * @memberof Token
   */
  refresh_token: any;
  /**
   *
   * @type {any}
   * @memberof Token
   */
  token_type: any;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {any}
   * @memberof User
   */
  id: any;
  /**
   *
   * @type {any}
   * @memberof User
   */
  created_at: any;
  /**
   *
   * @type {any}
   * @memberof User
   */
  updated_at: any;
  /**
   *
   * @type {any}
   * @memberof User
   */
  deleted_at: any;
  /**
   *
   * @type {any}
   * @memberof User
   */
  first_name: any;
  /**
   *
   * @type {any}
   * @memberof User
   */
  last_name: any;
  /**
   *
   * @type {any}
   * @memberof User
   */
  username: any;
  /**
   *
   * @type {any}
   * @memberof User
   */
  account_id: any;
}
/**
 *
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
  /**
   *
   * @type {any}
   * @memberof UserCreate
   */
  first_name: any;
  /**
   *
   * @type {any}
   * @memberof UserCreate
   */
  last_name: any;
  /**
   *
   * @type {any}
   * @memberof UserCreate
   */
  username: any;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {any}
   * @memberof ValidationError
   */
  loc: any;
  /**
   *
   * @type {any}
   * @memberof ValidationError
   */
  msg: any;
  /**
   *
   * @type {any}
   * @memberof ValidationError
   */
  type: any;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Authenticate User Account
     * @param {any} username
     * @param {any} [grantType]
     * @param {any} [password]
     * @param {any} [refreshToken]
     * @param {any} [scope]
     * @param {any} [clientId]
     * @param {any} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticateUserAccountAccountsAuthenticatePost: async (
      username: any,
      grantType?: any,
      password?: any,
      refreshToken?: any,
      scope?: any,
      clientId?: any,
      clientSecret?: any,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      assertParamExists('authenticateUserAccountAccountsAuthenticatePost', 'username', username);
      const localVarPath = `/accounts/authenticate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new URLSearchParams();

      if (grantType !== undefined) {
        localVarFormParams.set('grant_type', grantType as any);
      }

      if (username !== undefined) {
        localVarFormParams.set('username', username as any);
      }

      if (password !== undefined) {
        localVarFormParams.set('password', password as any);
      }

      if (refreshToken !== undefined) {
        localVarFormParams.set('refresh_token', refreshToken as any);
      }

      if (scope !== undefined) {
        localVarFormParams.set('scope', scope as any);
      }

      if (clientId !== undefined) {
        localVarFormParams.set('client_id', clientId as any);
      }

      if (clientSecret !== undefined) {
        localVarFormParams.set('client_secret', clientSecret as any);
      }

      localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = localVarFormParams.toString();

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create User Account
     * @param {AccountCreate} accountCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserAccountAccountsCreatePost: async (
      accountCreate: AccountCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'accountCreate' is not null or undefined
      assertParamExists('createUserAccountAccountsCreatePost', 'accountCreate', accountCreate);
      const localVarPath = `/accounts/create`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(accountCreate, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Identify the current user and return the user account
     * @summary Identify User Account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifyUserAccountAccountsMeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/accounts/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(localVarHeaderParameter, 'OAuth2PasswordBearer', [], configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Authenticate User Account
     * @param {any} username
     * @param {any} [grantType]
     * @param {any} [password]
     * @param {any} [refreshToken]
     * @param {any} [scope]
     * @param {any} [clientId]
     * @param {any} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authenticateUserAccountAccountsAuthenticatePost(
      username: any,
      grantType?: any,
      password?: any,
      refreshToken?: any,
      scope?: any,
      clientId?: any,
      clientSecret?: any,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateUserAccountAccountsAuthenticatePost(
        username,
        grantType,
        password,
        refreshToken,
        scope,
        clientId,
        clientSecret,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Create User Account
     * @param {AccountCreate} accountCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUserAccountAccountsCreatePost(
      accountCreate: AccountCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUserAccountAccountsCreatePost(
        accountCreate,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Identify the current user and return the user account
     * @summary Identify User Account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async identifyUserAccountAccountsMeGet(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.identifyUserAccountAccountsMeGet(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AccountApiFp(configuration);
  return {
    /**
     *
     * @summary Authenticate User Account
     * @param {AccountApiAuthenticateUserAccountAccountsAuthenticatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authenticateUserAccountAccountsAuthenticatePost(
      requestParameters: AccountApiAuthenticateUserAccountAccountsAuthenticatePostRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<Token> {
      return localVarFp
        .authenticateUserAccountAccountsAuthenticatePost(
          requestParameters.username,
          requestParameters.grantType,
          requestParameters.password,
          requestParameters.refreshToken,
          requestParameters.scope,
          requestParameters.clientId,
          requestParameters.clientSecret,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create User Account
     * @param {AccountApiCreateUserAccountAccountsCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserAccountAccountsCreatePost(
      requestParameters: AccountApiCreateUserAccountAccountsCreatePostRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<Account> {
      return localVarFp
        .createUserAccountAccountsCreatePost(requestParameters.accountCreate, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Identify the current user and return the user account
     * @summary Identify User Account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifyUserAccountAccountsMeGet(options?: AxiosRequestConfig): AxiosPromise<Account> {
      return localVarFp.identifyUserAccountAccountsMeGet(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for authenticateUserAccountAccountsAuthenticatePost operation in AccountApi.
 * @export
 * @interface AccountApiAuthenticateUserAccountAccountsAuthenticatePostRequest
 */
export interface AccountApiAuthenticateUserAccountAccountsAuthenticatePostRequest {
  /**
   *
   * @type {any}
   * @memberof AccountApiAuthenticateUserAccountAccountsAuthenticatePost
   */
  readonly username: any;

  /**
   *
   * @type {any}
   * @memberof AccountApiAuthenticateUserAccountAccountsAuthenticatePost
   */
  readonly grantType?: any;

  /**
   *
   * @type {any}
   * @memberof AccountApiAuthenticateUserAccountAccountsAuthenticatePost
   */
  readonly password?: any;

  /**
   *
   * @type {any}
   * @memberof AccountApiAuthenticateUserAccountAccountsAuthenticatePost
   */
  readonly refreshToken?: any;

  /**
   *
   * @type {any}
   * @memberof AccountApiAuthenticateUserAccountAccountsAuthenticatePost
   */
  readonly scope?: any;

  /**
   *
   * @type {any}
   * @memberof AccountApiAuthenticateUserAccountAccountsAuthenticatePost
   */
  readonly clientId?: any;

  /**
   *
   * @type {any}
   * @memberof AccountApiAuthenticateUserAccountAccountsAuthenticatePost
   */
  readonly clientSecret?: any;
}

/**
 * Request parameters for createUserAccountAccountsCreatePost operation in AccountApi.
 * @export
 * @interface AccountApiCreateUserAccountAccountsCreatePostRequest
 */
export interface AccountApiCreateUserAccountAccountsCreatePostRequest {
  /**
   *
   * @type {AccountCreate}
   * @memberof AccountApiCreateUserAccountAccountsCreatePost
   */
  readonly accountCreate: AccountCreate;
}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
  /**
   *
   * @summary Authenticate User Account
   * @param {AccountApiAuthenticateUserAccountAccountsAuthenticatePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public authenticateUserAccountAccountsAuthenticatePost(
    requestParameters: AccountApiAuthenticateUserAccountAccountsAuthenticatePostRequest,
    options?: AxiosRequestConfig,
  ) {
    return AccountApiFp(this.configuration)
      .authenticateUserAccountAccountsAuthenticatePost(
        requestParameters.username,
        requestParameters.grantType,
        requestParameters.password,
        requestParameters.refreshToken,
        requestParameters.scope,
        requestParameters.clientId,
        requestParameters.clientSecret,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create User Account
   * @param {AccountApiCreateUserAccountAccountsCreatePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public createUserAccountAccountsCreatePost(
    requestParameters: AccountApiCreateUserAccountAccountsCreatePostRequest,
    options?: AxiosRequestConfig,
  ) {
    return AccountApiFp(this.configuration)
      .createUserAccountAccountsCreatePost(requestParameters.accountCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Identify the current user and return the user account
   * @summary Identify User Account
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public identifyUserAccountAccountsMeGet(options?: AxiosRequestConfig) {
    return AccountApiFp(this.configuration)
      .identifyUserAccountAccountsMeGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * An endpoint to post messages and expect a response. The messages are reconstructed into a valuable prompt and sent over to OpenAI\'s API which most likely responds with a message.  :param message: The message object containing the message body to send  :raises HTTPException:     503 -> when it fails to establish a successful communication with third party API
     * @summary Create Message
     * @param {MessageCreate} messageCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessageChatsMessagePost: async (
      messageCreate: MessageCreate,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'messageCreate' is not null or undefined
      assertParamExists('createMessageChatsMessagePost', 'messageCreate', messageCreate);
      const localVarPath = `/chats/message`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication OAuth2PasswordBearer required
      // oauth required
      await setOAuthToObject(localVarHeaderParameter, 'OAuth2PasswordBearer', [], configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(messageCreate, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration);
  return {
    /**
     * An endpoint to post messages and expect a response. The messages are reconstructed into a valuable prompt and sent over to OpenAI\'s API which most likely responds with a message.  :param message: The message object containing the message body to send  :raises HTTPException:     503 -> when it fails to establish a successful communication with third party API
     * @summary Create Message
     * @param {MessageCreate} messageCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMessageChatsMessagePost(
      messageCreate: MessageCreate,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatCompletionResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMessageChatsMessagePost(messageCreate, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ChatApiFp(configuration);
  return {
    /**
     * An endpoint to post messages and expect a response. The messages are reconstructed into a valuable prompt and sent over to OpenAI\'s API which most likely responds with a message.  :param message: The message object containing the message body to send  :raises HTTPException:     503 -> when it fails to establish a successful communication with third party API
     * @summary Create Message
     * @param {ChatApiCreateMessageChatsMessagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessageChatsMessagePost(
      requestParameters: ChatApiCreateMessageChatsMessagePostRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<ChatCompletionResponse> {
      return localVarFp
        .createMessageChatsMessagePost(requestParameters.messageCreate, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createMessageChatsMessagePost operation in ChatApi.
 * @export
 * @interface ChatApiCreateMessageChatsMessagePostRequest
 */
export interface ChatApiCreateMessageChatsMessagePostRequest {
  /**
   *
   * @type {MessageCreate}
   * @memberof ChatApiCreateMessageChatsMessagePost
   */
  readonly messageCreate: MessageCreate;
}

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI {
  /**
   * An endpoint to post messages and expect a response. The messages are reconstructed into a valuable prompt and sent over to OpenAI\'s API which most likely responds with a message.  :param message: The message object containing the message body to send  :raises HTTPException:     503 -> when it fails to establish a successful communication with third party API
   * @summary Create Message
   * @param {ChatApiCreateMessageChatsMessagePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatApi
   */
  public createMessageChatsMessagePost(
    requestParameters: ChatApiCreateMessageChatsMessagePostRequest,
    options?: AxiosRequestConfig,
  ) {
    return ChatApiFp(this.configuration)
      .createMessageChatsMessagePost(requestParameters.messageCreate, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RootApi - axios parameter creator
 * @export
 */
export const RootApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Returns basic information about the application
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rootGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RootApi - functional programming interface
 * @export
 */
export const RootApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RootApiAxiosParamCreator(configuration);
  return {
    /**
     * Returns basic information about the application
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rootGet(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * RootApi - factory interface
 * @export
 */
export const RootApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = RootApiFp(configuration);
  return {
    /**
     * Returns basic information about the application
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rootGet(options?: AxiosRequestConfig): AxiosPromise<ApplicationInfo> {
      return localVarFp.rootGet(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * RootApi - object-oriented interface
 * @export
 * @class RootApi
 * @extends {BaseAPI}
 */
export class RootApi extends BaseAPI {
  /**
   * Returns basic information about the application
   * @summary Root
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RootApi
   */
  public rootGet(options?: AxiosRequestConfig) {
    return RootApiFp(this.configuration)
      .rootGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Find a user by ID  :param session: the database session to use :param id: the unique user identifier to use to retrieve the user  :raises HTTPException:     if no user with the specified identifier or ID is found
     * @summary Find User By Id
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserByIdUsersIdGet: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('findUserByIdUsersIdGet', 'id', id);
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Find a user by username  :param session: the database session to use :param username: the unique username to use to retrieve the user  :raises HTTPException:     if no user that goes by a username is found
     * @summary Find User By Username
     * @param {any} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserByUsernameUsersByUsernameGet: async (
      username: any,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      assertParamExists('findUserByUsernameUsersByUsernameGet', 'username', username);
      const localVarPath = `/users/by_username`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (username !== undefined) {
        localVarQueryParameter['username'] = username;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     * Find a user by ID  :param session: the database session to use :param id: the unique user identifier to use to retrieve the user  :raises HTTPException:     if no user with the specified identifier or ID is found
     * @summary Find User By Id
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findUserByIdUsersIdGet(
      id: any,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findUserByIdUsersIdGet(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Find a user by username  :param session: the database session to use :param username: the unique username to use to retrieve the user  :raises HTTPException:     if no user that goes by a username is found
     * @summary Find User By Username
     * @param {any} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findUserByUsernameUsersByUsernameGet(
      username: any,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findUserByUsernameUsersByUsernameGet(username, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     * Find a user by ID  :param session: the database session to use :param id: the unique user identifier to use to retrieve the user  :raises HTTPException:     if no user with the specified identifier or ID is found
     * @summary Find User By Id
     * @param {UserApiFindUserByIdUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserByIdUsersIdGet(
      requestParameters: UserApiFindUserByIdUsersIdGetRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<User> {
      return localVarFp
        .findUserByIdUsersIdGet(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Find a user by username  :param session: the database session to use :param username: the unique username to use to retrieve the user  :raises HTTPException:     if no user that goes by a username is found
     * @summary Find User By Username
     * @param {UserApiFindUserByUsernameUsersByUsernameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserByUsernameUsersByUsernameGet(
      requestParameters: UserApiFindUserByUsernameUsersByUsernameGetRequest,
      options?: AxiosRequestConfig,
    ): AxiosPromise<User> {
      return localVarFp
        .findUserByUsernameUsersByUsernameGet(requestParameters.username, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for findUserByIdUsersIdGet operation in UserApi.
 * @export
 * @interface UserApiFindUserByIdUsersIdGetRequest
 */
export interface UserApiFindUserByIdUsersIdGetRequest {
  /**
   *
   * @type {any}
   * @memberof UserApiFindUserByIdUsersIdGet
   */
  readonly id: any;
}

/**
 * Request parameters for findUserByUsernameUsersByUsernameGet operation in UserApi.
 * @export
 * @interface UserApiFindUserByUsernameUsersByUsernameGetRequest
 */
export interface UserApiFindUserByUsernameUsersByUsernameGetRequest {
  /**
   *
   * @type {any}
   * @memberof UserApiFindUserByUsernameUsersByUsernameGet
   */
  readonly username: any;
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   * Find a user by ID  :param session: the database session to use :param id: the unique user identifier to use to retrieve the user  :raises HTTPException:     if no user with the specified identifier or ID is found
   * @summary Find User By Id
   * @param {UserApiFindUserByIdUsersIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public findUserByIdUsersIdGet(requestParameters: UserApiFindUserByIdUsersIdGetRequest, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .findUserByIdUsersIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Find a user by username  :param session: the database session to use :param username: the unique username to use to retrieve the user  :raises HTTPException:     if no user that goes by a username is found
   * @summary Find User By Username
   * @param {UserApiFindUserByUsernameUsersByUsernameGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public findUserByUsernameUsersByUsernameGet(
    requestParameters: UserApiFindUserByUsernameUsersByUsernameGetRequest,
    options?: AxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .findUserByUsernameUsersByUsernameGet(requestParameters.username, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
